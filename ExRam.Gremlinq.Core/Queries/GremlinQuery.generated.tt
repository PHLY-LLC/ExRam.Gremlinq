<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="T4\Constants.tt" #>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
using System;
using NullGuard;
using System.Linq;
using System.Linq.Expressions;
using System.Collections.Generic;

namespace ExRam.Gremlinq.Core
{
    partial class GremlinQuery<TElement, TOutVertex, TInVertex, TPropertyValue, TMeta, TFoldedQuery>
    {
        <# foreach(var iface in substitutedBaseInterfaces)
        { #>

            <#= iface #> <#= iface #>.And(params Func<<#= iface #>, IGremlinQuery>[] andTraversals) => And(andTraversals);
            <#= iface #> <#= iface #>.As(params StepLabel[] stepLabels) => As(stepLabels);

            <#= iface #> <#= iface #>.Barrier() => Barrier();

            TTargetQuery <#= iface #>.Choose<TTargetQuery>(Func<<#= iface #>, IGremlinQuery> traversalPredicate, Func<<#= iface #>, TTargetQuery> trueChoice, Func<<#= iface #>, TTargetQuery> falseChoice) => Choose(traversalPredicate, trueChoice, falseChoice);
            TTargetQuery <#= iface #>.Choose<TTargetQuery>(Func<<#= iface #>, IGremlinQuery> traversalPredicate, Func<<#= iface #>, TTargetQuery> trueChoice) => Choose(traversalPredicate, trueChoice);

            TTargetQuery <#= iface #>.Coalesce<TTargetQuery>(params Func<<#= iface #>, TTargetQuery>[] traversals) => Coalesce(traversals);

            <#= iface #> <#= iface #>.Dedup() => Dedup();
            <#= iface #> <#= iface #>.Drop() => Drop();

            <#= iface #> <#= iface #>.Emit() => Emit();

            <#= iface #> <#= iface #>.Where(string lambda) => Where(lambda);

            TTargetQuery <#= iface #>.FlatMap<TTargetQuery>(Func<<#= iface #>, TTargetQuery> mapping) => FlatMap(mapping);

            <#= iface #> <#= iface #>.Identity() => Identity();

            <#= iface #> <#= iface #>.Take(long count) => Take(count);
            <#= iface #> <#= iface #>.TakeLocal(long count) => TakeLocal(count);

            TTargetQuery <#= iface #>.Local<TTargetQuery>(Func<<#= iface #> , TTargetQuery> localTraversal) => Local(localTraversal);

            TTargetQuery <#= iface #>.Map<TTargetQuery>(Func<<#= iface #>, TTargetQuery> mapping) => Map(mapping);
        
            <#= iface #> <#= iface #>.Not(Func<<#= iface #>, IGremlinQuery> notTraversal) => Not(notTraversal);
            <#= iface #> <#= iface #>.None() => None();

            TTargetQuery <#= iface #>.Optional<TTargetQuery>(Func<<#= iface #>, TTargetQuery> optionalTraversal) => Optional(optionalTraversal);
            <#= iface #> <#= iface #>.Or(params Func<<#= iface #>, IGremlinQuery>[] orTraversals) => Or(orTraversals);

            IGremlinQuery<(TElement1, TElement2)> <#= iface #>.Project<TElement1, TElement2>(Func<<#= iface #>, IGremlinQuery<TElement1>> projection1, Func<<#= iface #>, IGremlinQuery<TElement2>> projection2) => Project(projection1, projection2);
            IGremlinQuery<(TElement1, TElement2, TElement3)> <#= iface #>.Project<TElement1, TElement2, TElement3>(Func<<#= iface #>, IGremlinQuery<TElement1>> projection1, Func<<#= iface #>, IGremlinQuery<TElement2>> projection2, Func<<#= iface #>, IGremlinQuery<TElement3>> projection3) => Project(projection1, projection2, projection3);
            IGremlinQuery<(TElement1, TElement2, TElement3, TElement4)> <#= iface #>.Project<TElement1, TElement2, TElement3, TElement4>(Func<<#= iface #>, IGremlinQuery<TElement1>> projection1, Func<<#= iface #>, IGremlinQuery<TElement2>> projection2, Func<<#= iface #>, IGremlinQuery<TElement3>> projection3, Func<<#= iface #>, IGremlinQuery<TElement4>> projection4) => Project(projection1, projection2, projection3, projection4);
            
            <#= iface #> <#= iface #>.Range(long low, long high) => Range(low, high);

            TTargetQuery <#= iface #>.Repeat<TTargetQuery>(Func<<#= iface #>, TTargetQuery> repeatTraversal) => Repeat(repeatTraversal);
            TTargetQuery <#= iface #>.RepeatUntil<TTargetQuery>(Func<<#= iface #>, TTargetQuery> repeatTraversal, Func<<#= iface #>, IGremlinQuery> untilTraversal) => RepeatUntil(repeatTraversal, untilTraversal);

            <#= iface #> <#= iface #>.SideEffect(Func<<#= iface #>, IGremlinQuery> sideEffectTraversal) => SideEffect(sideEffectTraversal);
            <#= iface #> <#= iface #>.Skip(long count) => Skip(count);

            <#= iface #> <#= iface #>.Tail(long count) => Tail(count);
            <#= iface #> <#= iface #>.TailLocal(int count) => TailLocal(count);

            <#= iface #> <#= iface #>.Times(int count) => Times(count);

            TTargetQuery <#= iface #>.Union<TTargetQuery>(params Func<<#= iface #>, TTargetQuery>[] unionTraversals) => Union(unionTraversals);

          <#
        } #>



        <# foreach(var iface in Untyped(substitutedBaseInterfaces))
        { #>

            <#= iface + "<TResult>" #> <#= iface #>.Cast<TResult>() => Cast<TResult>();

          <#
        } #>



        <# foreach(var iface in Typed(Qualified(substitutedBaseInterfaces)))
        { #>

            <#= MakeOrdered(iface) #> <#= iface #>.OrderBy(Expression<Func<<#= GetElement(iface) #>, object>> projection) => OrderBy(projection, Order.Increasing);
            <#= MakeOrdered(iface) #> <#= iface #>.OrderByDescending(Expression<Func<<#= GetElement(iface) #>, object>> projection) => OrderBy(projection, Order.Decreasing);

          <#
        } #>



        <# foreach(var iface in Qualified(substitutedBaseInterfaces))
        { #>

            <#= MakeOrdered(iface) #> <#= iface #>.OrderBy(Func<<#= iface #>, IGremlinQuery> traversal) => OrderBy(traversal, Order.Increasing);
            <#= MakeOrdered(iface) #> <#= iface #>.OrderBy(string lambda) => OrderBy(lambda);
            <#= MakeOrdered(iface) #> <#= iface #>.OrderByDescending(Func<<#= iface #>, IGremlinQuery> traversal) => OrderBy(traversal, Order.Decreasing);

          <#
        } #>



        <# foreach(var iface in MakeOrdered(Qualified(substitutedBaseInterfaces)))
        { #>

            <#= iface #> <#= iface #>.ThenBy(Func<<#= MakeUnordered(iface) #>, IGremlinQuery> traversal) => By(traversal, Order.Increasing);
            <#= iface #> <#= iface #>.ThenByDescending(Func<<#= MakeUnordered(iface) #>, IGremlinQuery> traversal) => By(traversal, Order.Decreasing);
            <#= iface #> <#= iface #>.ThenBy(string lambda) => By(lambda);

          <#
        } #>



        <# foreach(var iface in Typed(MakeOrdered(Qualified(substitutedBaseInterfaces))))
        { #>

            <#= iface #> <#= iface #>.ThenBy(Expression<Func<<#= GetElement(iface) #>, object>> projection) => By(projection, Order.Increasing);
            <#= iface #> <#= iface #>.ThenByDescending(Expression<Func<<#= GetElement(iface) #>, object>> projection) => By(projection, Order.Decreasing);

          <#
        } #>



        <# foreach(var iface in Typed(Simple(Qualified(Element(substitutedBaseInterfaces)))))
        { #>

            <# if (!iface.Contains("VertexProperty"))
            { #>

                IValueGremlinQuery<IDictionary<string, TTarget>> <#= iface #>.ValueMap<TTarget>(params Expression<Func<<#= GetElement(iface) #>, TTarget>>[] keys) => ValueMap<IDictionary<string, TTarget>>(keys);

              <#
            } #>

            IValueGremlinQuery<TTarget> <#= iface #>.Values<TTarget>() => ValuesForProjections<TTarget>(Enumerable.Empty<LambdaExpression>()); 
            IValueGremlinQuery<TTarget> <#= iface #>.Values<TTarget>(params Expression<Func<<#= GetElement(iface) #>, TTarget>>[] projections) => ValuesForProjections<TTarget>(projections);
            IValueGremlinQuery<TTarget> <#= iface #>.Values<TTarget>(params Expression<Func<<#= GetElement(iface) #>, TTarget[]>>[] projections) => ValuesForProjections<TTarget>(projections);

          <#
        } #>



        <# foreach(var iface in Untyped(Qualified(Element(substitutedBaseInterfaces))))
        { #>

            <#= iface #><TTarget> <#= iface #>.OfType<TTarget>() => OfType<TTarget>(<#= iface.Contains("VertexGremlinQuery") ? "Model.VerticesModel" : "Model.EdgesModel" #>);

          <#
        } #>
    



        <# foreach(var iface in Typed(Qualified(Element(substitutedBaseInterfaces))))
        { #>

            <# if (!iface.Contains("VertexProperty"))
            { #>

                <#= iface.Replace(GetElement(iface), "TTarget") #> <#= iface #>.OfType<TTarget>() => OfType<TTarget>(<#= iface.Contains("VertexGremlinQuery") ? "Model.VerticesModel" : "Model.EdgesModel" #>);

                <#= iface #> <#= iface #>.Property<TProjectedValue>(Expression<Func<<#= GetElement(iface) #>, TProjectedValue>> projection, [AllowNull] TProjectedValue value) => <#= iface.StartsWith("IVertexGremlinQuery") ? "VertexProperty(projection, value);" : "Property(projection, value);" #>

                <#if (iface.StartsWith("IVertexGremlinQuery"))
                { #>

                    <#= iface #> <#= iface #>.Property<TProjectedValue>(Expression<Func<<#= GetElement(iface) #>, TProjectedValue[]>> projection, [AllowNull] TProjectedValue value) => VertexProperty(projection, value);

                  <#
                } #>

              <#
            } #>

            <#= iface #> <#= iface #>.Where(Expression<Func<<#= GetElement(iface) #>, bool>> predicate) => Where(predicate);
            <#= iface #> <#= iface #>.Where<TProjection>(Expression<Func<<#= GetElement(iface) #>, TProjection>> projection, Func<IGremlinQuery<TProjection>, IGremlinQuery> propertyTraversal) => Where(projection, propertyTraversal);

          <#
        } #>



        <# foreach(var iface in Typed(substitutedBaseInterfaces.Concat(MakeOrdered(substitutedBaseInterfaces))))
        { #>

            <#= iface.Replace(GetElement(iface), "TResult") #> <#= iface #>.Cast<TResult>() => Cast<TResult>();
            <#= iface #> <#= iface #>.Coin(double probability) => Coin(probability);

            TTargetQuery <#= iface #>.Aggregate<TTargetQuery>(Func<<#= iface #>, StepLabel<<#= GetElement(iface) #>[]>, TTargetQuery> continuation) => Aggregate(continuation);
            TTargetQuery <#= iface #>.As<TTargetQuery>(Func<<#= iface #>, StepLabel<<#= iface #>, <#= GetElement(iface) #>>, TTargetQuery> continuation) => As(continuation);

            IArrayGremlinQuery<<#= GetElement(iface) #>[], <#= MakeUnordered(iface) #>> <#= iface #>.Fold() => Fold<<#= MakeUnordered(iface) #>>();

            <#= MakeUnordered(iface) #> <#= iface #>.Where(Func<<#= iface #>, IGremlinQuery> filterTraversal) => Where(filterTraversal);

          <#
        } #>
    }
}
#pragma warning restore CS0109 // Member does not hide an inherited member; new keyword is not required

<#@ include file="T4\HelperMethods.tt" #>
